package com.bolsadeideas.springboot.di.app;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.bolsadeideas.springboot.di.app.auth.handler.LoginSuccessHandler;

@EnableWebSecurity

@EnableGlobalMethodSecurity(

		prePostEnabled = true,

		securedEnabled = true,

		jsr250Enabled = true)

@Configuration

public class SpringSecurityConfig {

	@Autowired

	private LoginSuccessHandler successHandler;

	@Bean

	public static PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder();

	}

	@Bean

	public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration)
			throws Exception {

		return authenticationConfiguration.getAuthenticationManager();

	}

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
 
		http.authorizeRequests().antMatchers("/", "/css/**", "/js/**", "/images/**", "/listar").permitAll()
				.antMatchers("/ver/**").hasAnyRole("USER")
				.antMatchers("/uploads/**").hasAnyRole("USER")
				.antMatchers("/form/**").hasAnyRole("ADMIN")
				.antMatchers("/eliminar/**").hasAnyRole("ADMIN")
				.antMatchers("/factura/**").hasAnyRole("ADMIN")
				.anyRequest().authenticated()
				.and()
				.formLogin()
					.successHandler(successHandler)
					.loginPage("/login")
				.permitAll()
				.and()
				.logout().permitAll();
 
		return http.build();
	}

	@Bean

	public UserDetailsService userDetailsService(BCryptPasswordEncoder bCryptPasswordEncoder) {

		InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();

		manager.createUser(User.withUsername("admin")

				.password(bCryptPasswordEncoder.encode("12345"))

				.roles("ADMIN", "USER")

				.build());

		manager.createUser(User.withUsername("yohan")

				.password(bCryptPasswordEncoder.encode("12345"))

				.roles("USER")

				.build());

		return manager;

	}

	@Bean

	public WebMvcConfigurer corsConfigurer() {

		return new WebMvcConfigurer() {

			@Override

			public void addCorsMappings(CorsRegistry registry) {

				registry.addMapping("/**")

						.allowedMethods("*");

			}

		};

	}

}
